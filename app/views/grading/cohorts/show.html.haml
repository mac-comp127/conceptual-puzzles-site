= content_for :nav do
  %a.back{href: grading_cohorts_path} Cohorts

%main
  %h1
    = cohort.name
    .aside
      = button_to "Edit settings", edit_grading_cohort_path(cohort), method: :get
      = button_to "Preview as student", grading_cohort_preview_as_student_path(cohort)

  .metadata-group
    .status
      Status:
      - now = Cohort.official_current_time
      - if !cohort.started?
        .status-message
          Not started yet
        (begins in #{distance_of_time_in_words(cohort.start_time, now)})
      - if cohort.in_session?
        .status-message
          In session
        (ends in #{distance_of_time_in_words(cohort.end_time, now)})
      - if cohort.ended?
        .status-message
          Ended
        (#{distance_of_time_in_words(cohort.end_time, now)} ago)
    .status
      Dates:
      .status-message= cohort.start_date
      until
      .status-message= cohort.end_date
    .status
      Instructor:
      .status-message= cohort.instructor.email

  .metadata-group
    .status
      Puzzle types:
      .status-message
        - if cohort.puzzle_types.any?
          = cohort.puzzle_types.map(&:name).join(", ")
        - else
          None yet
    .status
      Puzzle score denominator:
      .status-message
        - if denominator = cohort.puzzle_score_denominator
          = denominator
        - else
          All enabled puzzles

  %h2 Pending Attempts
  = render "grading/attempts/attempts_table", attempts: @pending_attempts
  %a.detail-nav{href: grading_cohort_attempts_path(cohort), "data-turbo-prefetch" => "false"}<
    All Attempts

  %h2 Students
  %a.detail-nav{href: grading_cohort_students_path(cohort), "data-turbo-prefetch" => "false"}<
    Roster and Gradebook

  - if @error_attempts.any?
    %h2 Recent Errors
    = render "grading/attempts/attempts_table", attempts: @error_attempts
