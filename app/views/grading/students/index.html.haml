= content_for :nav do
  = render 'cohort_back_link'

%main
  %h1
    = cohort.name_and_instructor
    Students

  %table.index.row-click
    %tr.header
      %th
      %th
      %th.numeric Total
      - PuzzleType.all.each do |type|
        %th= type.name
    - @students.order(:email).each do |student|
      %tr
        %td= student.username
        %td= link_to student.display_name, grading_student_path(student)
        %td.numeric= percent_format student.total_score
        - student.puzzle_statuses.each do |status|
          = render 'puzzle_score_cell', status:
    - { "Mean" => :mean, "Median" => :median }.each do |stat_label, stat_fn|
      %tr.footer
        %th
        %th.numeric= stat_label
        %td.numeric= percent_format send(stat_fn, all_total_scores)
        - PuzzleType.all.each do |type|
          %td.numeric= percent_format send(stat_fn, all_scores_for(puzzle_type: type))

  %h2 Add Students

  .admin-form
    = form_with url: grading_cohort_enrollment_path do |form|
      %label Student emails:
      .field
        = form.text_area :emails_as_text, rows: 10
      .hint
        %ul
          %li Separate emails with commas and/or line breaks.
          %li Both “foo@bar.com” and “Foo Bar <foo@bar.com>” will work.
          %li System will check for matching accounts that either have no cohort yet, or are in a different currently active cohort.
          %li You will have the chance to review and confirm enrollments.
      .action-buttons= form.submit 'Check emails', class: :big